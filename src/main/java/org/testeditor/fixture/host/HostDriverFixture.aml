package org.testeditor.fixture.host


element type inputField {
    interactions = getStatus, typeAt, sendCommand, getValueAt
}

element type field {
    interactions = getStatus, sendCommand, getValueAt
}

interaction type connect {
    template = "Connect to" ${hostname} "with port" ${port} "using s3270 from" ${s3270Path} "with" ${rowOffset} "and" ${columnOffset}    
    method = HostDriverFixture.connect(s3270Path, hostname, port, rowOffset, columnOffset)
}

interaction type disconnect {
    template = "Disconnect"  
    method = HostDriverFixture.disconnect()
}

interaction type getStatus {
    template = "Get status"  
    method = HostDriverFixture.getStatus()
}

interaction type typeInto {
    template = "Enter" ${value} "into" ${element} 
    method = HostDriverFixture.typeInto(element, locatorStrategy, value)
}

interaction type typeConfidentialInto {
    template = "Enter confidential" ${value} "into insecure field " ${element} 
    method = HostDriverFixture.typeConfidentialInto(element, locatorStrategy, value)
}

interaction type typeConfidentialIntoConfidential {
    template = "Enter confidential " ${value} "into" ${element} 
    method = HostDriverFixture.typeConfidentialIntoConfidential(element, locatorStrategy, value)
}

interaction type printFieldsOnLog {
    template = "Print fields on log" 
    method = HostDriverFixture.buildAllFieldsAsString()
}

interaction type sendCommand {
    template = "Send command" ${command}  
    method = HostDriverFixture.sendCommand(command)
}

interaction type getValueAt {
    template = "Read value from" ${element}
    method = HostDriverFixture.readValueAt(element,locatorStrategy) 
}

component type GeneralHost {
   interactions = connect, disconnect, getStatus, typeInto, typeConfidentialInto, typeConfidentialIntoConfidential, sendCommand, printFieldsOnLog, getValueAt
}

